{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "from time import sleep\n",
    "import  sys\n",
    "import random\n",
    "\n",
    "\"\"\"\n",
    "Game structure:\n",
    "\n",
    "    game_start()\n",
    "    room_1\n",
    "    room_2\n",
    "    room_3\n",
    "    Win_()/Fail_()\n",
    "\n",
    "Define functions:\n",
    "\n",
    "\n",
    "\n",
    "Known error\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def game_start():\n",
    "    \n",
    "    global guest_answer \n",
    "    global real_thief\n",
    "    \n",
    "    first_sentence=\"Hello! May I help you? .... Nothing needed to help? Well... Actually I need you to help me!!!\"\n",
    "    \n",
    "    #This is for typingwriter effect\n",
    "    \n",
    "    for x in first_sentence:\n",
    "        print(x, end='')\n",
    "        sys.stdout.flush()\n",
    "        sleep(0.1)\n",
    "    \n",
    "    print(\"\"\"\n",
    "    ________________________________________________________________________________________\n",
    "    \n",
    "    My name is Thanos, someone stole my Infinity Gauntlet after I washing my hands....\n",
    "    I need someone to help me find out who is the thief and get back my Infinity Gauntlet...\n",
    "    \n",
    "    What dose it look like? .... \n",
    "    \n",
    "    Well... \n",
    "    \n",
    "    Something like your grandmother's golove with 5 fancy marbles.\n",
    "    \n",
    "    Still don't get it? Just google \" Infinity Gauntlet\"\n",
    "        \n",
    "    ________________________________________________________________________________________\n",
    "    \"\"\")\n",
    "    \n",
    "    #This is for error control \n",
    "    \n",
    "    true_false_switch = True \n",
    "    \n",
    "    while true_false_switch == True :\n",
    "        \n",
    "        print('    Could you please help me find out? Yes/No :      ')\n",
    "        guest_answer= input().lower()\n",
    "        \n",
    "        #Set potential answer list to improve use exp\n",
    "        potenial_answers_y=['y','yes','yeah','ok','okay','fine','good','great','of cource','why not','no problem','yes i could','whatever'] \n",
    "        potenial_answers_n=['n','no','no way','never','not','nono','nah','nooooo','noo','nooooooo']\n",
    "        \n",
    "        if guest_answer in potenial_answers_y:\n",
    "        \n",
    "            print(\"\\n\")      \n",
    "            sentence_list1=[\"    \",\"Oh man! You are such a nice person!\\n\",\"    Well...I would love to know more about you!\",\n",
    "            \"\\n    What's your name my friend?\"]\n",
    "                        \n",
    "            for sentence in sentence_list1:\n",
    "                for x in sentence:\n",
    "                    print(x, end='')\n",
    "                    sys.stdout.flush()\n",
    "                    sleep(0.1)\n",
    "        \n",
    "            true_false_switch = False \n",
    "            \n",
    "            name_()\n",
    "          \n",
    "            sentence_2=f'    Fantastic, {guest_name}! From now on, we will be the best partner for each other!\\n'\n",
    "\n",
    "            for x in sentence_2:\n",
    "                print(x, end='')\n",
    "                sys.stdout.flush()\n",
    "                sleep(0.1)\n",
    "    \n",
    "            room_1()\n",
    "        \n",
    "        elif guest_answer in potenial_answers_n:\n",
    "         \n",
    "            sentence_list2=\"    I knew you must hate me!\\n But I am sorry, the game is continuing! Come on! Let's be friends!\\n\"\n",
    "        \n",
    "            for sentence in sentence_list2:\n",
    "                for x in sentence:\n",
    "                    print(x, end='')\n",
    "                    sys.stdout.flush()\n",
    "                    sleep(0.1)\n",
    "\n",
    "            true_false_switch = True \n",
    "        \n",
    "        else:\n",
    "            print(\"    Something went wrong! try again!\")\n",
    "            true_false_switch = True \n",
    "\n",
    "            \n",
    "def room_1():\n",
    "    \n",
    "    global power_choice\n",
    "    sleep(1)\n",
    "\n",
    "    print(\"\"\"\n",
    "    ________________________________________________________________________________________\n",
    "                               1.Choose a super power  \n",
    "    \n",
    "                        \n",
    "                  So...today I can give one of the following super power....\n",
    "            \"\"\")\n",
    "    \n",
    "\n",
    "    super_power_list=[[\"A\",\"Invisibility\"],[\"B\", \"Magic\"],[\"C\", \"Freezing\"]]\n",
    "\n",
    "    \n",
    "\n",
    "    for letter,power in super_power_list:\n",
    "\n",
    "        print(\"                 \"+letter+\". \"+power+\"     \")\n",
    "     \n",
    "    sleep(0.5)\n",
    "    print(\" \\n\")\n",
    "    print(\"\"\"                Which super power do you want to have? <Enter A,B or C>:\"\"\")\n",
    "    print(\"\"\"\n",
    "    ________________________________________________________________________________________\n",
    "    \"\"\")\n",
    "\n",
    "    true_false_switch=True\n",
    "\n",
    "    while true_false_switch==True:\n",
    "\n",
    "        power_choice=input().capitalize()\n",
    "\n",
    "        if power_choice == super_power_list[0][0] or power_choice in super_power_list [0][1]:\n",
    "            print(\"    Nice pal! Now you got a nice super power! \"+super_power_list[0][1] +\" !!!\")\n",
    "            \n",
    "            #Change the input to the expected superpower name\n",
    "            power_choice = super_power_list[0][1]\n",
    "            \n",
    "            true_false_switch=False\n",
    "            \n",
    "            room_2()\n",
    "        elif power_choice == super_power_list[1][0] or power_choice in super_power_list [1][1]:\n",
    "            \n",
    "            #Change the input to the expected superpower name\n",
    "            power_choice = super_power_list [1][1]\n",
    "            true_false_switch=False\n",
    "            print(\"    Nice pal! Now you got a nice super power! \"+super_power_list[1][1]+\" !!!\")\n",
    "            room_2()\n",
    "            \n",
    "        elif power_choice == super_power_list[2][0] or power_choice in super_power_list[2][1]:\n",
    "            print(\"    Nice pal! Now you got a nice super power! \"+super_power_list[2][1]+\" !!!\")\n",
    "            #Change the input to the expected superpower name\n",
    "            power_choice = super_power_list [2][1]\n",
    "            true_false_switch=False\n",
    "            room_2()\n",
    "        else:\n",
    "            print(\"    Hey pal! You must key the wrong choice!\\n\")\n",
    "\n",
    "def room_2():\n",
    "    \n",
    "    \n",
    "    global real_thief\n",
    "    sleep(1)\n",
    "    print(\"\"\"\n",
    "    ________________________________________________________________________________________\n",
    "                                 2.Find out the thief \n",
    "                        \n",
    "                        \n",
    "                  As I said before, someone stole my Infinity Gauntlet. \n",
    "                                                                                        \"\"\")\n",
    "    \n",
    "    \n",
    "    print(\"\"\"\n",
    "    \n",
    "                  But I don't know who is it, can you help me to find out?\n",
    "    \n",
    "    \"\"\") \n",
    "    \n",
    "    #create a dictionary of potential theives\n",
    "    thief_D={\"A\":\"Spiderman\",\"B\":\"Iron man\",\"C\":\"Black widow\"}\n",
    "    \n",
    "    #use the dictionary [] function to call out the values\n",
    "    #.keys function to make a list of keys \n",
    "    \n",
    "    print(\"\"\"                The following people are suspects:                      \\n\"\"\")\n",
    "    \n",
    "    \n",
    "    for key,thief in thief_D.items():\n",
    "        sleep(0.5)\n",
    "        print(\"                 \"+key+\". \"+thief)\n",
    "\n",
    "        sleep(0.7)\n",
    "    print(\"\"\"\\n                Who do you think he/she is the thief?\n",
    "     ________________________________________________________________________________________\"\"\")\n",
    "\n",
    "    guess_thief()\n",
    "    \n",
    "    print(thief_answer)\n",
    "    \n",
    "    \n",
    "    #Random choose the thief\n",
    "    \n",
    "    real_thief=thief_D[random.choice(list(thief_D.keys()))]\n",
    "    \n",
    "    #Compare the results(Random choice of thief v.s player's answer)\n",
    "    chances =2\n",
    "\n",
    "    while chances >1 :\n",
    "\n",
    "\n",
    "        if thief_answer == real_thief:\n",
    "            sleep(0.5)\n",
    "            print(f\"    Wow! You got him! {real_thief} is the thief!\")\n",
    "            room_3()\n",
    "            chances-=2\n",
    "\n",
    "\n",
    "        elif thief_answer != real_thief: \n",
    "            sleep(0.5)\n",
    "            print(f\"    You got the wrong person! Let's try again! {real_thief}\")\n",
    "            chances-=1\n",
    "            guess_thief()\n",
    "\n",
    "\n",
    "    while chances == 1:     \n",
    "\n",
    "        if thief_answer == real_thief:\n",
    "            sleep(0.5)\n",
    "            print(f\"    Wow! You got him! {real_thief} is the thief!\")\n",
    "            chances-=1\n",
    "            room_3()\n",
    "\n",
    "        elif thief_answer != real_thief: \n",
    "            sleep(0.5)\n",
    "            print(f\"    You got the wrong person! We fail! {real_thief}\")\n",
    "            chances-=1\n",
    "            fail()\n",
    "\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "def room_3():\n",
    "  \n",
    "    sleep(1)\n",
    "    \n",
    "    \n",
    "    print(f\"\"\"\n",
    "    ________________________________________________________________________________________\n",
    "                                    3.Fight with the thief\n",
    "    \n",
    "    {real_thief}:If you want to take back the Gaunlet, you need to play dice with me...\"\"\")\n",
    "    \n",
    "    sleep(1)\n",
    "    print(f\"\"\"    {real_thief}:Here is the deal...\"\"\")\n",
    "    sleep(1)\n",
    "    print(f\"\"\"    {real_thief}:Wait for it.... \"\"\")\n",
    "    sleep(0.5)\n",
    "    print(\"\"\"\n",
    "    \n",
    "            1) If your number > my number: You win! You can take the Gaunlet back!\n",
    "            2) If your number = my number: Let's roll the dice one more time!\n",
    "            3) If your number < my number: I am sorry! You will never get the Gaunlet! \\n\"\"\")\n",
    "    sleep(0.5)\n",
    "    print(\"    Ready for the dice game? \")\n",
    "    print(\"\\n\")\n",
    "      \n",
    "    def roll_dice():\n",
    "    \n",
    "        global dice_player\n",
    "        global dice_thief\n",
    "    \n",
    "        input(\"     <Click enter to roll the dice game  >           \\n\")\n",
    "    \n",
    "        dice_player=random.randint(1,6)\n",
    "        sleep(0.5)\n",
    "        print(\"Your number is \")\n",
    "        print(dice_player)\n",
    "    \n",
    "        dice_thief=random.randint(1,6)\n",
    "        sleep(1)\n",
    "        print(f\"{real_thief}'s number is \")\n",
    "        print(dice_thief)\n",
    "    \n",
    "\n",
    "\n",
    "    roll_dice()    \n",
    "    \n",
    "\n",
    "    if dice_player > dice_thief:\n",
    "        \n",
    "        win()\n",
    "    \n",
    "    elif dice_player == dice_thief:\n",
    "        \n",
    "        sleep(0.5)\n",
    "        print(\"Ok let's do it again!\")\n",
    "\n",
    "        while dice_player == dice_thief:\n",
    "            \n",
    "            roll_dice()\n",
    "        \n",
    "            if dice_player != dice_thief:\n",
    "            \n",
    "                if dice_player > dice_thief:\n",
    "                    \n",
    "                    win()\n",
    "                    \n",
    "                else:\n",
    "                    \n",
    "                    fail()\n",
    "                    \n",
    "    else:\n",
    "        sleep(0.5)\n",
    "        print(\"Oh...no! You lose the game!\")\n",
    "        sleep(0.7)\n",
    "        print(\"..............................\")\n",
    "        sleep(0.9)\n",
    "        print(\"Thanos: Hey actually you can use your superpower to change the game!\")\n",
    "        sleep(0.10)\n",
    "        input(\"     Click any key to trigger your superpower!!!!!    \")\n",
    "                    \n",
    "        superpower()\n",
    "    \n",
    "        if power_choice == \"Invisibility\":\n",
    "            sleep(0.5)\n",
    "            print(f\"You can use your {power_choice} steal the glove...\")\n",
    "            sleep(0.7)\n",
    "            print(f\"But Unfortunately....{real_thief} caught you!\")\n",
    "            sleep(0.9)\n",
    "            print(\"We lose.....\")\n",
    "            fail()\n",
    "        elif power_choice == \"Magic\":\n",
    "            sleep(0.5)\n",
    "            print(f\"You can use your {power_choice}to change the dice!\")\n",
    "            sleep(0.7)\n",
    "            print(f\"But Unfortunately....{real_thief} caught you!\") \n",
    "            sleep(0.9)\n",
    "            print(\"We lose.....\")\n",
    "            fail()\n",
    "                        \n",
    "        else:\n",
    "            sleep(0.5)\n",
    "            print(f\"You can use your {power_choice}to change the dice!\")\n",
    "            sleep(0.7)\n",
    "            print(\"You win!!! You got the Gaunlet successfully!\")\n",
    "            win()\n",
    "                    \n",
    " \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "#Functions \n",
    "\n",
    "#define a function fot player to guess who is the thief+control error\n",
    "def guess_thief():  \n",
    "    \n",
    "    global thief_answer\n",
    "      \n",
    "    true_false_switch = True\n",
    "    \n",
    "    thief_D={\"A\":\"Spiderman\",\"B\":\"Iron man\",\"C\":\"Black widow\"}\n",
    "    \n",
    "    #Use a list of possible answers to control error\n",
    "    possible_answers=[\"A\",\"B\",\"C\",\"Spiderman\",\"Spider man\",\"Spideemen\",\"Spider men\",\"Iron man\",\"Ironman\",\"Iron men\",\"Black widow\",\"Blackwidow\",\"Blackwindow\"]\n",
    "        \n",
    "    while true_false_switch == True:\n",
    "        \n",
    "        thief_answer_input=input().capitalize()\n",
    "        \n",
    "        if thief_answer_input not in possible_answers:\n",
    "            print(\"    Don't accuse innocent, please choose one of the three\")\n",
    "            \n",
    "        else:\n",
    "            \n",
    "            if thief_answer_input not in list(thief_D.keys()): \n",
    "            \n",
    "            #Use the first three letter to avoid duplicate possible answer\n",
    "            \n",
    "                if thief_answer_input[0:3] == \"Spi\":\n",
    "                    thief_answer=\"Spiderman\"\n",
    "                    print(thief_answer)\n",
    "\n",
    "                elif thief_answer_input[0:3] == \"Iro\":\n",
    "                    thief_answer=\"Iron man\"\n",
    "                    print(thief_answer)\n",
    "                \n",
    "                elif thief_answer_input[0:3] == \"Bla\":\n",
    "                    thief_answer=\"Black widow\"  \n",
    "                    print(thief_answer)\n",
    "                    \n",
    "            else:\n",
    "                thief_answer=thief_D[thief_answer_input]\n",
    "                print(thief_answer)\n",
    "\n",
    "\n",
    "                \n",
    "            true_false_switch = False \n",
    "            \n",
    "            \n",
    "#Ask name of the player, instead of put under if condition, using funtion to add error control \n",
    "\n",
    "def name_():\n",
    "    \n",
    "    global guest_name\n",
    "    \n",
    "    true_false_switch=True\n",
    "    \n",
    "    while true_false_switch == True:\n",
    "        \n",
    "        guest_name=input().capitalize()\n",
    "        \n",
    "        if guest_name in \"                       \":\n",
    "            print(\"Sorry! I did not get your name! Tell me again!\")\n",
    "        elif guest_name != \" \":\n",
    "            true_false_switch=False\n",
    "        else:\n",
    "            print(\"Sorry! I did not get your name! Tell me again!\")\n",
    "\n",
    "def win():\n",
    "    sleep(0.5)\n",
    "    print(\"\"\" \n",
    "\n",
    "                ██╗   ██╗ ██████╗ ██╗   ██╗    ██╗    ██╗██╗███╗   ██╗██╗\n",
    "                ╚██╗ ██╔╝██╔═══██╗██║   ██║    ██║    ██║██║████╗  ██║██║\n",
    "                 ╚████╔╝ ██║   ██║██║   ██║    ██║ █╗ ██║██║██╔██╗ ██║██║\n",
    "                  ╚██╔╝  ██║   ██║██║   ██║    ██║███╗██║██║██║╚██╗██║╚═╝\n",
    "                   ██║   ╚██████╔╝╚██████╔╝    ╚███╔███╔╝██║██║ ╚████║██╗\n",
    "                   ╚═╝    ╚═════╝  ╚═════╝      ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝╚═╝\n",
    "                        \"\"\")\n",
    "    \n",
    "    sleep(0.6)\n",
    "    print(\"\"\"\n",
    "                                                                                                                                                        \n",
    "\n",
    "            ████████╗██╗  ██╗███████╗    ███████╗███╗   ██╗██████╗      ██████╗ ███████╗\n",
    "            ╚══██╔══╝██║  ██║██╔════╝    ██╔════╝████╗  ██║██╔══██╗    ██╔═══██╗██╔════╝\n",
    "               ██║   ███████║█████╗      █████╗  ██╔██╗ ██║██║  ██║    ██║   ██║█████╗  \n",
    "               ██║   ██╔══██║██╔══╝      ██╔══╝  ██║╚██╗██║██║  ██║    ██║   ██║██╔══╝  \n",
    "               ██║   ██║  ██║███████╗    ███████╗██║ ╚████║██████╔╝    ╚██████╔╝██║     \n",
    "               ╚═╝   ╚═╝  ╚═╝╚══════╝    ╚══════╝╚═╝  ╚═══╝╚═════╝      ╚═════╝ ╚═╝     \n",
    "                                                                           \"\"\")\n",
    "    \n",
    "    sleep(0.7)\n",
    "    print(\"\"\"\n",
    "  \n",
    "  \n",
    "            ████████╗██╗  ██╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗     ██████╗ \n",
    "            ╚══██╔══╝██║  ██║██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║     ██╔══██╗\n",
    "               ██║   ███████║█████╗      ██║ █╗ ██║██║   ██║██████╔╝██║     ██║  ██║\n",
    "               ██║   ██╔══██║██╔══╝      ██║███╗██║██║   ██║██╔══██╗██║     ██║  ██║\n",
    "               ██║   ██║  ██║███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║███████╗██████╔╝\n",
    "               ╚═╝   ╚═╝  ╚═╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝ \n",
    "                                                                                     \"\"\")\n",
    "    \n",
    "    sleep(0.8)\n",
    "    print(\"\"\"\n",
    " \n",
    " \n",
    " \n",
    "             █╗███████╗     ██████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗ ██████╗          \n",
    "            ██║██╔════╝    ██╔════╝██╔═══██╗████╗ ████║██║████╗  ██║██╔════╝          \n",
    "            ██║███████╗    ██║     ██║   ██║██╔████╔██║██║██╔██╗ ██║██║  ███╗         \n",
    "            ██║╚════██║    ██║     ██║   ██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║         \n",
    "            ██║███████║    ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝██╗██╗██╗\n",
    "            ╚═╝╚══════╝     ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝╚═╝╚═\n",
    "\n",
    "                                                                                                                                                        \n",
    "                                                        \n",
    "    \n",
    "    \n",
    "    \"\"\")\n",
    "    \n",
    "        \n",
    "    \n",
    "def fail():\n",
    "    sleep(0.5)\n",
    "    print(\"Do you want to help me and start over again? <Y/N>\")\n",
    "    \n",
    "    fail_choice=input().capitalize()\n",
    "    possible_answers_Y=[\"Y\",\"Yes\",\"Yeah\",\"Ok\",\"Okay\",\"Fine\",\"Whatever\",\"Yes i want to\",\"I want to\",\"I want it\"]   \n",
    "    \n",
    "    if fail_choice in possible_answers_Y:\n",
    "        room_1()\n",
    "        \n",
    "    else:\n",
    "        sleep(0.7)\n",
    "        print(\"You did not help Thanos..........\")\n",
    "        sleep(0.9)\n",
    "        print(\"\"\"\n",
    "                            ──────────────▐█████───────\n",
    "                            ──────▄▄████████████▄──────\n",
    "                            ────▄██▀▀────▐███▐████▄────\n",
    "                            ──▄██▀───────███▌▐██─▀██▄──\n",
    "                            ─▐██────────▐███─▐██───██▌─\n",
    "                            ─██▌────────███▌─▐██───▐██─\n",
    "                            ▐██────────▐███──▐██────██▌\n",
    "                            ██▌────────███▌──▐██────▐██\n",
    "                            ██▌───────▐███───▐██────▐██\n",
    "                            ██▌───────███▌──▄─▀█────▐██\n",
    "                            ██▌──────▐████████▄─────▐██\n",
    "                            ██▌──────█████████▀─────▐██\n",
    "                            ▐██─────▐██▌────▀─▄█────██▌\n",
    "                            ─██▌────███─────▄███───▐██─\n",
    "                            ─▐██▄──▐██▌───────────▄██▌─\n",
    "                            ──▀███─███─────────▄▄███▀──\n",
    "                            ──────▐██▌─▀█████████▀▀────\n",
    "                            ──────███──────────────────\n",
    "               \"\"\")\n",
    "        sleep(0.11)\n",
    "        print(\"\"\"\n",
    "        ██╗   ██╗ ██████╗ ██╗   ██╗    ███████╗ █████╗ ██╗   ██╗███████╗\n",
    "        ╚██╗ ██╔╝██╔═══██╗██║   ██║    ██╔════╝██╔══██╗██║   ██║██╔════╝\n",
    "         ╚████╔╝ ██║   ██║██║   ██║    ███████╗███████║██║   ██║█████╗  \n",
    "          ╚██╔╝  ██║   ██║██║   ██║    ╚════██║██╔══██║╚██╗ ██╔╝██╔══╝  \n",
    "           ██║   ╚██████╔╝╚██████╔╝    ███████║██║  ██║ ╚████╔╝ ███████╗\n",
    "           ╚═╝    ╚═════╝  ╚═════╝     ╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝\n",
    "                                                                \"\"\")\n",
    "        sleep(0.13)\n",
    "        print(\"\"\"\n",
    "        ████████╗██╗  ██╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗     ██████╗ \n",
    "        ╚══██╔══╝██║  ██║██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║     ██╔══██╗\n",
    "           ██║   ███████║█████╗      ██║ █╗ ██║██║   ██║██████╔╝██║     ██║  ██║\n",
    "           ██║   ██╔══██║██╔══╝      ██║███╗██║██║   ██║██╔══██╗██║     ██║  ██║\n",
    "           ██║   ██║  ██║███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║███████╗██████╔╝\n",
    "           ╚═╝   ╚═╝  ╚═╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝ \n",
    "                                                                                        \"\"\")\n",
    "        \n",
    "        \n",
    "def superpower():\n",
    "    if power_choice == \"Invisibility\":\n",
    "        print(\"\"\"\n",
    "          \n",
    "                    ██╗███╗   ██╗██╗   ██╗██╗███████╗██╗██████╗ ██╗██╗     ██╗████████╗██╗   ██╗\n",
    "                    ██║████╗  ██║██║   ██║██║██╔════╝██║██╔══██╗██║██║     ██║╚══██╔══╝╚██╗ ██╔╝\n",
    "                    ██║██╔██╗ ██║██║   ██║██║███████╗██║██████╔╝██║██║     ██║   ██║    ╚████╔╝ \n",
    "                    ██║██║╚██╗██║╚██╗ ██╔╝██║╚════██║██║██╔══██╗██║██║     ██║   ██║     ╚██╔╝  \n",
    "                    ██║██║ ╚████║ ╚████╔╝ ██║███████║██║██████╔╝██║███████╗██║   ██║      ██║   \n",
    "                    ╚═╝╚═╝  ╚═══╝  ╚═══╝  ╚═╝╚══════╝╚═╝╚═════╝ ╚═╝╚══════╝╚═╝   ╚═╝      ╚═╝   \n",
    "                                                                                              \"\"\")\n",
    "        \n",
    "    elif power_choice == \"Magic\":\n",
    "        \n",
    "        print(\"\"\"\n",
    "          \n",
    "                    ███╗   ███╗ █████╗  ██████╗ ██╗ ██████╗\n",
    "                    ████╗ ████║██╔══██╗██╔════╝ ██║██╔════╝\n",
    "                    ██╔████╔██║███████║██║  ███╗██║██║     \n",
    "                    ██║╚██╔╝██║██╔══██║██║   ██║██║██║     \n",
    "                    ██║ ╚═╝ ██║██║  ██║╚██████╔╝██║╚██████╗\n",
    "                    ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝ ╚═════╝ \n",
    "                                                                                  \"\"\")  \n",
    "        \n",
    "    elif power_choice == \"Freezing\":\n",
    "        print(\"\"\"\n",
    "                    ███████╗██████╗ ███████╗███████╗███████╗██╗███╗   ██╗ ██████╗ \n",
    "                    ██╔════╝██╔══██╗██╔════╝██╔════╝╚══███╔╝██║████╗  ██║██╔════╝ \n",
    "                    █████╗  ██████╔╝█████╗  █████╗    ███╔╝ ██║██╔██╗ ██║██║  ███╗\n",
    "                    ██╔══╝  ██╔══██╗██╔══╝  ██╔══╝   ███╔╝  ██║██║╚██╗██║██║   ██║\n",
    "                    ██║     ██║  ██║███████╗███████╗███████╗██║██║ ╚████║╚██████╔╝\n",
    "                    ╚═╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════        \n",
    "           \"\"\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
