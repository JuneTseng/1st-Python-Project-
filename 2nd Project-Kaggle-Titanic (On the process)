{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn import tree\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from IPython.display import Image as PImage\n",
    "from subprocess import check_call\n",
    "from PIL import Image, ImageDraw, ImageFont"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load the file \n",
    "\n",
    "train= pd.read_csv('train.csv')\n",
    "test= pd.read_csv('test.csv')\n",
    "\n",
    "full_df=[train,test]\n",
    "\n",
    "#Show the data-Train \n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n\\nOther factor that might affect the result: \\n 1. Have a cabin or not -> create a column \"has_cabin\"\\n 2. Family size  -> create a column \"FamilySize\"\\n 3. Is it single travelor? -> create a column \"IsAlone\"\\n 4. Occupation -> create a column \"Occupation \"\\n \\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 1: Explore data and create extra columns that might be helpful for analysis\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "Other factor that might affect the result: \n",
    " 1. Have a cabin or not -> create a column \"has_cabin\"\n",
    " 2. Family size  -> create a column \"FamilySize\"\n",
    " 3. Is it single travelor? -> create a column \"IsAlone\"\n",
    " 4. Occupation -> create a column \"Occupation \"\n",
    " \n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Counts for cabins')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "#Step1.1 Create a column-has_cabin to determine if the passanger has cabin or not \n",
    "\n",
    "    #1 means having cabin ; 0 means having no cabin\n",
    "\n",
    "train['has_cabin']=train['Cabin'].apply(lambda x:0 if type(x) == float else 1)\n",
    "test['has_cabin']=test['Cabin'].apply(lambda x:0 if type(x) == float else 1)\n",
    "\n",
    "    #Plot\n",
    "sns.countplot(x='has_cabin', data=train).set_title('Counts for cabins')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1810ba58>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Step1.2 Create Family size\n",
    "train['FamilySize']=train['SibSp'] + train['Parch'] + 1\n",
    "test['FamilySize']=test['SibSp']+ test['Parch'] + 1 \n",
    "\n",
    "    #plot \n",
    "\n",
    "sns.countplot(x=\"FamilySize\", data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a181c1b00>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Step1.3 Create IsAlone\n",
    "\n",
    "    #Train dataset    \n",
    "\n",
    "train['IsAlone']=0\n",
    "train.loc[train['FamilySize'] == 1, 'IsAlone'] = 1\n",
    "\n",
    "    #Test dataset\n",
    "\n",
    "test['IsAlone']=0\n",
    "test.loc[test['FamilySize'] == 1, 'IsAlone'] = 1\n",
    "\n",
    "    #Plot\n",
    "\n",
    "sns.countplot(x='IsAlone', data=train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "    #Check the number of IsAlone and FamilySize is consistence\n",
    "\n",
    "    #Train\n",
    "print(len(train['FamilySize']==1) == len(train['IsAlone']==1))\n",
    "    #Test\n",
    "print(len(test['FamilySize']==1) == len(test['IsAlone'] ==1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16]),\n",
       " <a list of 17 Text xticklabel objects>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Step1.4 Create occupation column-title \n",
    "    #From Data Camp-https://www.datacamp.com/community/tutorials/feature-engineering-kaggle\n",
    "\n",
    "    #re.search: a function help you fine those data have similar patter ex.Mr. Miss. \n",
    "train['title']=train.Name.apply(lambda x: re.search(' ([A-Z][a-z]+\\.)',x).group(0))\n",
    "test['title']=test.Name.apply(lambda x: re.search(' ([A-Z][a-z]+\\.)',x).group(0))\n",
    "\n",
    "sns.countplot(x='title', data=train).set_title(\"Title\")\n",
    "plt.xticks(rotation=45)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "#Step1.4.2 Mr. Mrs. Miss. Master are the 4 largest groups-> Regroup title into 5 groups\n",
    "\n",
    "    #Create a list of title\n",
    "\n",
    "title_list_train=list(set(train['title']))\n",
    "title_list_test=list(set(test['title']))\n",
    "\n",
    "    #Test the list of two dataset is the same\n",
    "\n",
    "print(title_list_test == title_list_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "    #Create a new column of title for both dataset\n",
    "train['New_title']=train['title']\n",
    "test['New_title']=test['title']\n",
    "\n",
    "    #Creare a rare group list \n",
    "rare_group_list=[' Mme.',\n",
    " ' Col.',\n",
    " ' Countess.',\n",
    " ' Mlle.',\n",
    " ' Rev.',\n",
    " ' Capt.',\n",
    " ' Lady.',\n",
    " ' Jonkheer.',\n",
    " ' Don.',\n",
    " ' Major.',\n",
    " ' Dr.',\n",
    " ' Sir.']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "    #Create a new group for titles \n",
    "    \n",
    " #Replace 'Miss' to 'Ms'\n",
    "train['New_title']=train['New_title'].replace(' Miss.',' Ms.')\n",
    "test['New_title']=test['New_title'].replace(' Miss.',' Ms.')\n",
    "    \n",
    "  #Group rare titles to \"Rare \"\n",
    "train['New_title']=train['New_title'].replace(rare_group_list,\"Rare\")\n",
    "test['New_title']=test['New_title'].replace(rare_group_list,\"Rare\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "code_folding": [
     0
    ]
   },
   "outputs": [],
   "source": [
    "#Step2. Detect & fillout missing values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId      0\n",
      "Survived         0\n",
      "Pclass           0\n",
      "Name             0\n",
      "Sex              0\n",
      "Age              0\n",
      "SibSp            0\n",
      "Parch            0\n",
      "Ticket           0\n",
      "Fare             0\n",
      "Cabin          687\n",
      "Embarked         0\n",
      "has_cabin        0\n",
      "FamilySize       0\n",
      "IsAlone          0\n",
      "title            0\n",
      "New_title        0\n",
      "dtype: int64\n",
      "PassengerId      0\n",
      "Pclass           0\n",
      "Name             0\n",
      "Sex              0\n",
      "Age              0\n",
      "SibSp            0\n",
      "Parch            0\n",
      "Ticket           0\n",
      "Fare             0\n",
      "Cabin          327\n",
      "Embarked         0\n",
      "has_cabin        0\n",
      "FamilySize       0\n",
      "IsAlone          0\n",
      "title            0\n",
      "New_title        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Step2.1  Show the numbers of missing values for each column\n",
    "\n",
    "print(train.isnull().sum())\n",
    "print(test.isnull().sum())\n",
    "\n",
    "#Step2.2  Determine the strategy of filling the missing values\n",
    "\n",
    "#Strategy: \n",
    "    \n",
    "\"\"\"\n",
    "Age- fill the mean \n",
    "Cabin- use the fare range to decide it has cabin or not\n",
    "Drop- Embarked, Fare (It has only few missing values)\n",
    "    \n",
    "\"\"\"\n",
    "    \n",
    "    \n",
    "#Step2.3 Fill out missing \n",
    "\n",
    "    #Filling out missing values-Age\n",
    "    \n",
    "dataset=[train,test]\n",
    "for data in dataset:\n",
    "    \n",
    "    age_avg=data['Age'].mean()\n",
    "    age_std=data['Age'].std()\n",
    "    age_null_count=data['Age'].isnull().sum()\n",
    "    age_null_random_list= np.random.randint(age_avg - age_std , age_avg+age_std , size=age_null_count)\n",
    "    #Use mean +- std to randomly fill out values\n",
    "    data.loc[np.isnan(data['Age']),'Age']= age_null_random_list\n",
    "\n",
    "#Step2.4 Drop missing values \n",
    "    \n",
    "train['Embarked']=train['Embarked'].dropna().any()\n",
    "test['Fare']=test['Fare'].dropna().any()    \n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mapping your data \n",
    "\n",
    "for data in dataset:\n",
    "    #mapping sex\n",
    "    data['Sex']=data['Sex'].map({'female':0, 'male':1}).astype(int)\n",
    "    #mapping title\n",
    "    data['New_title']=data['New_title'].map({' Mr.':1,' Mrs.':2,' Ms.':3,'Rare':4,' Master.':5})\n",
    "    data['New_title']=data['New_title'].fillna(0)\n",
    "    #mapping Embarked\n",
    "    data['Embarked']=data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\n",
    "    #mapping fare\n",
    "    data.loc[data['Fare'] <= 7.91, 'Fare']\n",
    "    data.loc[(data['Fare'] > 7.91) & (data['Fare'] <=14.454), 'Fare'] = 1\n",
    "    data.loc[(data['Fare'] > 14.454) & (data['Fare'] <=31), 'Fare'] = 2\n",
    "    data.loc[(data['Fare'] > 31), 'Fare']\n",
    "    data['Fare'] = data['Fare'].astype(int)\n",
    "    \n",
    "    #mapping age\n",
    "    data.loc[data['Age'] <= 16, 'Age']\n",
    "    data.loc[(data['Age'] > 16) & (data['Age'] <= 32), 'Age' ] = 1\n",
    "    data.loc[(data['Age'] > 32) & (data['Age'] <= 48), 'Age' ] = 2\n",
    "    data.loc[(data['Age'] > 48),'Age']\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>has_cabin</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>title</th>\n",
       "      <th>New_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71</td>\n",
       "      <td>C85</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss.</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53</td>\n",
       "      <td>C123</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>886</td>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Rev.</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>887</td>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>2</td>\n",
       "      <td>B42</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss.</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>888</td>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>Miss.</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>889</td>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>2</td>\n",
       "      <td>C148</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name  Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    1   1.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...    0   2.0      1   \n",
       "2                               Heikkinen, Miss. Laina    0   1.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)    0   2.0      1   \n",
       "4                             Allen, Mr. William Henry    1   2.0      0   \n",
       "..                                                 ...  ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    1   1.0      0   \n",
       "887                       Graham, Miss. Margaret Edith    0   1.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"    0  16.0      1   \n",
       "889                              Behr, Mr. Karl Howell    1   1.0      0   \n",
       "890                                Dooley, Mr. Patrick    1   1.0      0   \n",
       "\n",
       "     Parch            Ticket  Fare Cabin  Embarked  has_cabin  FamilySize  \\\n",
       "0        0         A/5 21171     7   NaN         0          0           2   \n",
       "1        0          PC 17599    71   C85         0          1           2   \n",
       "2        0  STON/O2. 3101282     1   NaN         0          0           1   \n",
       "3        0            113803    53  C123         0          1           2   \n",
       "4        0            373450     1   NaN         0          0           1   \n",
       "..     ...               ...   ...   ...       ...        ...         ...   \n",
       "886      0            211536     1   NaN         0          0           1   \n",
       "887      0            112053     2   B42         0          1           1   \n",
       "888      2        W./C. 6607     2   NaN         0          0           4   \n",
       "889      0            111369     2  C148         0          1           1   \n",
       "890      0            370376     7   NaN         0          0           1   \n",
       "\n",
       "     IsAlone   title  New_title  \n",
       "0          0     Mr.          1  \n",
       "1          0    Mrs.          2  \n",
       "2          1   Miss.          3  \n",
       "3          0    Mrs.          2  \n",
       "4          1     Mr.          1  \n",
       "..       ...     ...        ...  \n",
       "886        1    Rev.          4  \n",
       "887        1   Miss.          3  \n",
       "888        0   Miss.          3  \n",
       "889        1     Mr.          1  \n",
       "890        1     Mr.          1  \n",
       "\n",
       "[891 rows x 17 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>has_cabin</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>title</th>\n",
       "      <th>New_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs.</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>1</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs.</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>413</td>\n",
       "      <td>1305</td>\n",
       "      <td>3</td>\n",
       "      <td>Spector, Mr. Woolf</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A.5. 3236</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>414</td>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17758</td>\n",
       "      <td>1</td>\n",
       "      <td>C105</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Dona.</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>415</td>\n",
       "      <td>1307</td>\n",
       "      <td>3</td>\n",
       "      <td>Saether, Mr. Simon Sivertsen</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/O.Q. 3101262</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>416</td>\n",
       "      <td>1308</td>\n",
       "      <td>3</td>\n",
       "      <td>Ware, Mr. Frederick</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>359309</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr.</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>417</td>\n",
       "      <td>1309</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Master. Michael J</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Master.</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                          Name  Sex  \\\n",
       "0            892       3                              Kelly, Mr. James    1   \n",
       "1            893       3              Wilkes, Mrs. James (Ellen Needs)    0   \n",
       "2            894       2                     Myles, Mr. Thomas Francis    1   \n",
       "3            895       3                              Wirz, Mr. Albert    1   \n",
       "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)    0   \n",
       "..           ...     ...                                           ...  ...   \n",
       "413         1305       3                            Spector, Mr. Woolf    1   \n",
       "414         1306       1                  Oliva y Ocana, Dona. Fermina    0   \n",
       "415         1307       3                  Saether, Mr. Simon Sivertsen    1   \n",
       "416         1308       3                           Ware, Mr. Frederick    1   \n",
       "417         1309       3                      Peter, Master. Michael J    1   \n",
       "\n",
       "      Age  SibSp  Parch              Ticket  Fare Cabin  Embarked  has_cabin  \\\n",
       "0     2.0      0      0              330911     1   NaN         2          0   \n",
       "1     2.0      1      0              363272     1   NaN         0          0   \n",
       "2    62.0      0      0              240276     1   NaN         2          0   \n",
       "3     1.0      0      0              315154     1   NaN         0          0   \n",
       "4     1.0      1      1             3101298     1   NaN         0          0   \n",
       "..    ...    ...    ...                 ...   ...   ...       ...        ...   \n",
       "413   2.0      0      0           A.5. 3236     1   NaN         0          0   \n",
       "414   2.0      0      0            PC 17758     1  C105         1          1   \n",
       "415   2.0      0      0  SOTON/O.Q. 3101262     1   NaN         0          0   \n",
       "416   1.0      0      0              359309     1   NaN         0          0   \n",
       "417   1.0      1      1                2668     1   NaN         1          0   \n",
       "\n",
       "     FamilySize  IsAlone     title  New_title  \n",
       "0             1        1       Mr.        1.0  \n",
       "1             2        0      Mrs.        2.0  \n",
       "2             1        1       Mr.        1.0  \n",
       "3             1        1       Mr.        1.0  \n",
       "4             3        0      Mrs.        2.0  \n",
       "..          ...      ...       ...        ...  \n",
       "413           1        1       Mr.        1.0  \n",
       "414           1        1     Dona.        0.0  \n",
       "415           1        1       Mr.        1.0  \n",
       "416           1        1       Mr.        1.0  \n",
       "417           3        0   Master.        5.0  \n",
       "\n",
       "[418 rows x 16 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on built-in function min in module builtins:\n",
      "\n",
      "min(...)\n",
      "    min(iterable, *[, default=obj, key=func]) -> value\n",
      "    min(arg1, arg2, *args, *[, key=func]) -> value\n",
      "    \n",
      "    With a single iterable argument, return its smallest item. The\n",
      "    default keyword-only argument specifies an object to return if\n",
      "    the provided iterable is empty.\n",
      "    With two or more arguments, return the smallest argument.\n",
      "\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
